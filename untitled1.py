# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fqBHtZp1i5F-qD3j27MB-MJwnc0gKVRw
"""

#importing necessary libraries
 import pandas as pd
 import numpy as np
 import seaborn as sns
 import matplotlib.pyplot as plt

#Read data set
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

df = pd.read_csv("Life Expectancy Data.csv")

df.head() #will show the first five data set

df.tail() # it will show the bootom five record

#Sanity check of data - Identifying missing values, out liers, garbage values, Duplicate value
df.shape #checkes how many rows and columns in the data

df.info() #summary of the dataset

#how to find missing values ?
df.isnull().sum()

df.isnull().sum()/df.shape[0] * 100

#Finding duplicates
df.duplicated().sum()

#Identifying garbage value #Garbage values are always in the form of Objects

for i in df.select_dtypes(include = "object").columns :
  print(df[i].value_counts())
  print("***"*10)

#Exploratory Data Analysis(EDA)
#Descriptive statistics
df.describe()

df.describe().T

df.describe(include = "object")

#To visually understand the data, I will need histogram
for i in df.select_dtypes(include="number").columns :
  sns.histplot(data = df, x= i)
  plt.show()

#why we use Boxplot ? bcs to identify the outliers
for i in df.select_dtypes(include="number").columns :
  sns.boxplot(data = df, x= i)
  plt.show()

#why we use scatter plot ? to understand the relationships between the data or target or Independent variable
for i in ['Year', 'Adult Mortality', 'infant deaths',
       'Alcohol', 'percentage expenditure', 'Hepatitis B', 'Measles ', ' BMI ',
       'under-five deaths ', 'Polio', 'Total expenditure', 'Diphtheria ',
       ' HIV/AIDS', 'GDP', 'Population', ' thinness  1-19 years',
       ' thinness 5-9 years', 'Income composition of resources', 'Schooling'] :

       sns.scatterplot(data=df, x=i, y="Life expectancy ")
       plt.show()

df.select_dtypes(include = "number").columns

#how to see the corralation between the data ? using a heat map
df.select_dtypes(include = "number").corr()

plt.figure(figsize= (15,15))
sns.heatmap(df.select_dtypes(include = "number").corr(), annot = True)

#Missing value treatment
#choose the method of imputing missing value
#like mean median mode or KNNIputer

#continous data fill with the median | the mean
#if is a descriptive variable fill it with Mode
#if it is Categorical variable fill it with the mode

df.isnull().sum()

#we dont do any treatments to target variable
for i in ["BMI","Polio","Income composition of resources"] :
  df[i].fillna(df[i].median(),inplace=True)

df.isnull().sum()

from sklearn.impute import KNNImputer
impute = KNNImputer()

for i in df.select_dtypes(include = "number").columns :
   df[i]=impute.fit_transform(df[[i]])

df.isnull().sum()

#Out liers treatment
#decide whether to do outliers treatment or not , if do how ?

# we only do outliers treat ment for numerical data

def wisker(col) :
  q1,q3 = np.percentile(col,[25,75])
  iqr = q3-q1
  lower_bound = q1 - (1.5*iqr)
  upper_bound = q3 + (1.5*iqr)

  return lower_bound,upper_bound

wisker (df["GDP"])

for i in [' BMI ','Total expenditure',' thinness 5-9 years',' thinness  1-19 years'] :
  lw_bound, up_bound = wisker(df[i])
  df[i] = np.where(df[i]>up_bound,up_bound,df[i])
  df[i] = np.where(df[i]<lw_bound,lw_bound,df[i])

for i in [' BMI ','Total expenditure',' thinness 5-9 years',' thinness  1-19 years'] :
  sns.boxplot(df[i])
  plt.show()

df.columns

#check for duplicate if we have any unique columns in the data set, delete

df.drop_duplicates()

#converting object into numerical called encoding
#Do lable encoding and one hot encoding with pd.getdummies

dummy = pd.get_dummies(data = df, columns =["Country","Status"],drop_first=True)

dummy

